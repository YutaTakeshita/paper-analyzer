#!/bin/bash

# エラーが発生したらスクリプトを終了する
set -eo pipefail

# ------------------------------------------------------------------------------
# 設定 (必要に応じて変更してください)
# ------------------------------------------------------------------------------
# コミットメッセージ (引数で指定できるようにするか、ここで固定にする)
DEFAULT_COMMIT_MESSAGE="Update backend and frontend code"
COMMIT_MESSAGE=${1:-$DEFAULT_COMMIT_MESSAGE} # スクリプトの第一引数があればそれを使い、なければデフォルト値

# プッシュ先のブランチ名
BRANCH_NAME="main" # または現在作業中のブランチ名

# ------------------------------------------------------------------------------
# 事前チェック (任意ですが推奨)
# ------------------------------------------------------------------------------
echo "------------------------------------"
echo "Git Push Configuration:"
echo "------------------------------------"
echo "Commit Message:       '${COMMIT_MESSAGE}'"
echo "Branch to push to:  '${BRANCH_NAME}'"
echo "------------------------------------"

# 現在のgit statusを表示して、コミット内容を確認する
git status

read -p "上記の内容でステージング、コミット、プッシュを開始しますか？ (y/N): " confirmation
if [[ "$confirmation" != "y" && "$confirmation" != "Y" ]]; then
    echo "GitHubへのプッシュがキャンセルされました。"
    exit 0
fi

# ------------------------------------------------------------------------------
# 1. 変更をステージングする
# ------------------------------------------------------------------------------
echo ""
echo "ステップ1: 変更をステージングします..."
# 全ての変更と新しいファイル (Untracked files) をステージング
# (.gitignore で無視されているファイルは除く)
git add .

# 特定のファイルだけをステージングしたい場合は以下のように個別に指定
# git add backend/Dockerfile
# git add backend/entrypoint.sh
# git add backend/update_firestore_status.py
# git add .gitignore
# git add frontend/ # フロントエンドの変更もあれば

if [ $? -ne 0 ]; then
    echo "エラー: ファイルのステージングに失敗しました。"
    exit 1
fi
echo "ステップ1完了: ファイルのステージングが成功しました。"
git status # ステージング後の状態を再確認

# ------------------------------------------------------------------------------
# 2. コミットする
# ------------------------------------------------------------------------------
echo ""
echo "ステップ2: 変更をコミットします..."
echo "コミットメッセージ: '${COMMIT_MESSAGE}'"

git commit -m "${COMMIT_MESSAGE}"

if [ $? -ne 0 ]; then
    echo "エラー: コミットに失敗しました。（ステージングする変更がない、または他のエラー）"
    # ステージングする変更がない場合、git commit はエラーコード 1 で終了することがある
    # これを許容する場合は、このエラーチェックを調整する必要がある
    # ただし、通常は何かしら変更があるはずなので、エラーとして扱うのが安全
    exit 1
fi
echo "ステップ2完了: コミットが成功しました。"

# ------------------------------------------------------------------------------
# 3. リモートリポジトリにプッシュする
# ------------------------------------------------------------------------------
echo ""
echo "ステップ3: リモートリポジトリ (origin/${BRANCH_NAME}) にプッシュします..."

git push origin "${BRANCH_NAME}"

if [ $? -ne 0 ]; then
    echo "エラー: リモートリポジトリへのプッシュに失敗しました。"
    exit 1
fi
echo "ステップ3完了: リモートリポジトリへのプッシュが成功しました。"
echo ""
echo "GitHubへのプッシュプロセスが完了しました。"